/**
 * Production Issues Fixer
 * 
 * This script helps fix common production issues related to CSP, fonts, and images
 * based on the verification report generated by verify-csp.js.
 */

const fs = require('fs');
const path = require('path');
const chalk = require('chalk');

// Configuration
const REPORTS_DIR = path.join(__dirname, '..', 'reports');
const CSP_REPORT_FILE = path.join(REPORTS_DIR, 'csp-violations.json');
const NEXT_CONFIG_FILE = path.join(__dirname, '..', 'next.config.mjs');

// Check if report exists
if (!fs.existsSync(CSP_REPORT_FILE)) {
  console.error(chalk.red('Error: CSP violation report not found.'));
  console.log(chalk.yellow('Please run "npm run verify:csp" first to generate the report.'));
  process.exit(1);
}

// Read the report
const report = JSON.parse(fs.readFileSync(CSP_REPORT_FILE, 'utf8'));

console.log(chalk.blue('üîß Starting production issues fixer...'));
console.log(chalk.yellow(`Based on report from: ${new Date(report.timestamp).toLocaleString()}\n`));

// Helper to extract domains from CSP violations
function extractDomainsFromCSPViolations(violations) {
  const domains = new Set();
  
  violations.forEach(violation => {
    const message = violation.message;
    
    // Extract domains from violation messages using common patterns
    const urlMatches = message.match(/(?:from|to) ['"]?(https?:\/\/[^'")\s]+)/gi);
    if (urlMatches) {
      urlMatches.forEach(match => {
        const url = match.replace(/^(?:from|to) ['"]?/i, '');
        try {
          const domain = new URL(url).hostname;
          domains.add(domain);
        } catch (e) {
          // Invalid URL, skip
        }
      });
    }
  });
  
  return Array.from(domains);
}

// Fix CSP issues
function fixCSPIssues() {
  console.log(chalk.blue('Analyzing CSP violations...'));
  
  if (report.cspViolations.length === 0) {
    console.log(chalk.green('‚úì No CSP violations to fix'));
    return;
  }
  
  console.log(chalk.yellow(`Found ${report.cspViolations.length} CSP violations`));
  
  // Extract domains from violations
  const missingDomains = extractDomainsFromCSPViolations(report.cspViolations);
  
  if (missingDomains.length === 0) {
    console.log(chalk.yellow('Could not extract specific domains from CSP violations'));
    return;
  }
  
  console.log(chalk.yellow(`Extracted domains that need to be added to CSP: ${missingDomains.join(', ')}`));
  
  // Read next.config.mjs
  if (!fs.existsSync(NEXT_CONFIG_FILE)) {
    console.error(chalk.red('Error: next.config.mjs not found'));
    return;
  }
  
  let nextConfig = fs.readFileSync(NEXT_CONFIG_FILE, 'utf8');
  
  // Check if there's a CSP directive
  if (!nextConfig.includes('Content-Security-Policy')) {
    console.log(chalk.yellow('No Content-Security-Policy directive found in next.config.mjs'));
    console.log(chalk.yellow('Please add the following domains to your CSP manually:'));
    console.log(missingDomains.join('\n'));
    return;
  }
  
  // Prepare suggestions for different CSP directives
  const suggestions = {
    'script-src': missingDomains,
    'img-src': missingDomains,
    'connect-src': missingDomains,
    'font-src': missingDomains,
    'style-src': missingDomains,
  };
  
  console.log(chalk.green('Suggested CSP updates:'));
  
  Object.entries(suggestions).forEach(([directive, domains]) => {
    console.log(chalk.green(`\n${directive}:`));
    domains.forEach(domain => {
      console.log(chalk.green(`  - Add '${domain}'`));
    });
  });
  
  console.log(chalk.yellow('\nPlease manually update your CSP in next.config.mjs with these domains.'));
  console.log(chalk.yellow('After updating, rebuild and restart the production server to apply changes.'));
}

// Fix font issues
function suggestFontFixes() {
  if (report.fontIssues.length === 0) {
    console.log(chalk.green('‚úì No font issues to fix'));
    return;
  }
  
  console.log(chalk.yellow(`\nFound font issues on ${report.fontIssues.length} pages`));
  
  // Count total affected elements
  const totalIssues = report.fontIssues.reduce((sum, page) => sum + page.issues.length, 0);
  console.log(chalk.yellow(`Total elements with font issues: ${totalIssues}`));
  
  // Check for common patterns in font issues
  const fontFamilies = new Set();
  report.fontIssues.forEach(page => {
    page.issues.forEach(issue => {
      fontFamilies.add(issue.fontFamily);
    });
  });
  
  console.log(chalk.yellow('\nDetected fallback font families:'));
  fontFamilies.forEach(family => {
    console.log(chalk.yellow(`  - ${family}`));
  });
  
  console.log(chalk.green('\nSuggestions to fix font issues:'));
  console.log(chalk.green('1. Check if font files are correctly included in the public directory'));
  console.log(chalk.green('2. Verify that font-src is properly set in your CSP'));
  console.log(chalk.green('3. Ensure your @font-face declarations use the correct paths'));
  console.log(chalk.green('4. Make sure font preloading is configured correctly'));
  console.log(chalk.green('5. Add font-display: swap; to your @font-face declarations for better fallback behavior'));
}

// Fix image issues
function suggestImageFixes() {
  if (report.imageIssues.length === 0) {
    console.log(chalk.green('‚úì No image issues to fix'));
    return;
  }
  
  console.log(chalk.yellow(`\nFound image issues on ${report.imageIssues.length} pages`));
  
  // Extract unique broken image sources
  const brokenSources = new Set();
  report.imageIssues.forEach(page => {
    page.brokenImages.forEach(img => {
      brokenSources.add(img.src);
    });
  });
  
  console.log(chalk.yellow('\nBroken image sources:'));
  brokenSources.forEach(src => {
    console.log(chalk.yellow(`  - ${src}`));
  });
  
  console.log(chalk.green('\nSuggestions to fix image issues:'));
  console.log(chalk.green('1. Verify that img-src is correctly set in your CSP'));
  console.log(chalk.green('2. Check if all image domains are allowed in next.config.mjs images.domains'));
  console.log(chalk.green('3. Ensure Supabase and Sanity.io storage urls are correctly configured'));
  console.log(chalk.green('4. Verify that all remote images are using the Next.js Image component with proper remotePatterns'));
  console.log(chalk.green('5. For local images, ensure they exist in the correct public directory path'));
}

// Run all fixes
function runAllFixes() {
  console.log(chalk.blue('Starting fixes based on verification report\n'));
  
  // Fix CSP issues
  console.log(chalk.blue('CSP ISSUES'));
  console.log(chalk.blue('=========='));
  fixCSPIssues();
  
  // Suggest font fixes
  console.log(chalk.blue('\nFONT ISSUES'));
  console.log(chalk.blue('==========='));
  suggestFontFixes();
  
  // Suggest image fixes
  console.log(chalk.blue('\nIMAGE ISSUES'));
  console.log(chalk.blue('============'));
  suggestImageFixes();
  
  console.log(chalk.blue('\nüèÅ Fix suggestions complete!'));
  console.log(chalk.yellow('Please manually implement the suggested fixes and re-run the verification.'));
}

// Run the fixer
runAllFixes(); 