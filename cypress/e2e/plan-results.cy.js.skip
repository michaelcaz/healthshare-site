describe('Plan Results and Recommendations', () => {
  beforeEach(() => {
    // Start at the questionnaire and complete it to see results
    cy.visit('/questionnaire');
    
    // Fill out the zip code field
    cy.get('input[type="text"]').first().clear().type('78620');
    
    // Proceed through the questionnaire by clicking buttons
    // We'll use a simplified approach that keeps clicking forward
    for (let i = 0; i < 8; i++) {
      // Look for any button that might advance the form
      cy.get('button[type="submit"], button.btn-primary, button:contains("Next"), button:contains("Continue")')
        .first()
        .click({force: true});
      
      // If there are any required fields, fill them with appropriate values
      cy.get('body').then($body => {
        // Check if we have any visible input fields
        if ($body.find('input[type="text"]:visible, input[type="number"]:visible, input[type="tel"]:visible, input[type="email"]:visible').length) {
          // Fill in appropriate values based on input field attributes or patterns
          cy.get('input[type="text"]:visible, input[type="number"]:visible, input[type="tel"]:visible, input[type="email"]:visible').each(($el) => {
            const inputType = $el.attr('type');
            const inputName = $el.attr('name') || '';
            const inputId = $el.attr('id') || '';
            const inputPlaceholder = $el.attr('placeholder') || '';
            
            // Different handling based on input type/attributes
            if (inputType === 'number' || inputName.includes('age') || inputId.includes('age')) {
              cy.wrap($el).clear().type('35');
            } else if (inputName.includes('zip') || inputId.includes('zip') || inputPlaceholder.includes('zip')) {
              cy.wrap($el).clear().type('78620');
            } else if (inputName.includes('income') || inputId.includes('income') || inputPlaceholder.includes('income')) {
              cy.wrap($el).clear().type('50000');
            } else if (inputName.includes('household') || inputId.includes('household') || inputPlaceholder.includes('household')) {
              cy.wrap($el).clear().type('3');
            } else if (inputName.includes('height') || inputId.includes('height') || inputPlaceholder.includes('height')) {
              cy.wrap($el).clear().type('70');
            } else if (inputName.includes('weight') || inputId.includes('weight') || inputPlaceholder.includes('weight')) {
              cy.wrap($el).clear().type('170');
            } else if (inputType === 'email') {
              cy.wrap($el).clear().type('test@example.com');
            } else if (inputType === 'tel') {
              cy.wrap($el).clear().type('5555555555');
            } else {
              // Default case for text inputs not matching specific patterns
              cy.wrap($el).clear().type('Test Value');
            }
          });
          
          // Select first option for radio/checkbox
          if ($body.find('input[type="radio"]:visible, input[type="checkbox"]:visible').length) {
            cy.get('input[type="radio"]:visible, input[type="checkbox"]:visible')
              .first()
              .check({force: true});
          }
          
          // Select first option for dropdowns
          if ($body.find('select:visible').length) {
            cy.get('select:visible').each(($select) => {
              const options = $select.find('option');
              if (options.length > 1) {
                // Select the second option (index 1) to avoid placeholder options
                cy.wrap($select).select(1);
              } else if (options.length === 1) {
                cy.wrap($select).select(0);
              }
            });
          }
          
          // Click next again after filling fields
          cy.get('button[type="submit"], button.btn-primary, button:contains("Next"), button:contains("Continue")')
            .first()
            .click({force: true});
        }
      });
      
      // Wait a moment for any transitions or data loading
      cy.wait(500);
      
      // Check if we've already reached the results page and exit the loop if we have
      cy.url().then(url => {
        if (url.includes('/results')) {
          cy.log('Reached results page - exiting questionnaire completion loop');
          return false; // This breaks the current 'then' chain
        }
      });
    }
    
    // After the loop, wait for the results page
    cy.url().should('include', '/results', { timeout: 10000 });
  });
  
  it('should display plan recommendations after completing the questionnaire', () => {
    // Look for plan cards or plan recommendations
    cy.get('body').then($body => {
      const hasPlanElements = 
        $body.find('[data-testid*="plan"], [id*="plan"], [class*="plan"], h2:contains("Recommended"), div:contains("results")').length > 0;
      
      expect(hasPlanElements).to.be.true;
    });
  });
  
  it('should show main recommendation with key details', () => {
    // We should see at least one recommendation with cost info
    cy.get('body').then($body => {
      const hasCostInfo = 
        $body.text().match(/\$\d+|\d+\/month|monthly cost|premium|share|contribution/i) !== null;
      
      expect(hasCostInfo).to.be.true;
    });
  });
  
  it('should allow viewing plan details', () => {
    // Look for details buttons or clickable plan cards
    cy.get('body').then($body => {
      // Try to find a details button or link
      const detailsElement = $body.find('button:contains("Details"), a:contains("Details"), [data-testid*="details"], button:contains("Learn More"), button:contains("View")');
      
      if (detailsElement.length > 0) {
        // Click the details element
        cy.wrap(detailsElement).first().click({force: true});
        
        // A modal or new page should show more plan information
        cy.get('body').then($updatedBody => {
          const hasDetailedInfo = 
            $updatedBody.find('[data-testid*="modal"], [class*="modal"], [id*="modal"]').length > 0 ||
            $updatedBody.text().match(/coverage|benefits|waiting period|network/i) !== null;
          
          expect(hasDetailedInfo).to.be.true;
        });
      } else {
        // If no details button found, log a message
        cy.log('No details button found - skipping detailed view test');
      }
    });
  });
}); 